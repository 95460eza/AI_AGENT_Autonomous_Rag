# TWO-STAGE image building TO MINIMIZE THE IMAGE SIZE!!!!!!!!


# SPECIFIES THAT AN ARGUMENT WILL BE PASSED VIA "PYTHON_DOCKER_IMAGE=" WHEN RUNNING THE "DOCKER BUILD" COMMAND
# Ex: docker build --build-arg PYTHON_DOCKER_IMAGE=python:3.9 -t image_webapp:latest .
# ALSO PROVIDING A DEFAULT VALUE
ARG PYTHON_DOCKER_IMAGE=python:3.9


# EACH "FROM" COMMAND WILL START A NEW "STAGE" (AKA VERSION) OF THE IMAGE YOU CREATING.
# THE "AS" INSTRUCTION JUST GIVES AN ALIAS FOR SIMPLICITY IN FUTURE REFERENCE OF AN OBJECT
FROM $PYTHON_DOCKER_IMAGE AS python-base


# Our builder STAGE IMAGE ONLY FOR THE PURPOSE OF INSTALLING  libraries
FROM python-base AS python-builder

# UPGRADE TO THEIR LATEST VERSION ANY "ALREADY" installed packages IN THE IMAGE
# "apt-get clean" reduces the size of the Docker image by removing UNNECESSARY files no longer needed after installation.
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y gcc && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*   # further reduce image size by removing cached package lists.


# CREATING THE VIRTUAL ENVIRONMENT IN A DIRECTORY "SEPARATE" FROM THE ROOT OF THE IMAGE BY "FIRST" USING "WORKDIR" AVOIDS CONFLICT WITH OTHER 
# FILES IN THERE AND ALSO CHOOSING TO PLACE IT IN A DIRECTORY THAT REFLECTS THE APP CONTEXT (LIKE /app) IS "GOOD PRACTICE" TO KEEP THE DOCKER 
# FILE ORGANIZED AS WELL AS THE FILE STRUCTURE CLEAR.

# NOTE: THE "WORKDIR" INSTRUCTION "DOES NOT" CARRY OVER ACROSS THE STAGES STARTED BY A "FROM" COMMAND!!!!!!!!!!!!!!!!!!!!
# When the "WORKDIR" INSTRUCTION IS SEEN, Docker AUTOMATICALLY creates "INSIDE THE IMAGE" the "/app" FOLDER IF it doesn’t ALREADY exist!!!!
# AFTER the "WORKDIR /app" command, every command RAN "INSIDE THE IMAGE" USES files "FROM" that folder and ALSO the "CONTENT" of that folder is
# the basis WHEN using "RELATIVE" references 
WORKDIR /app


# CREATE "IN THE APP FOLDER" OF THE IMAGE A VIRTUAL ENVIRONMENT THAT "WILL" GET THE LIBRARIES NEEDED FOR OUR APP
# THIS ENVIRONMENT INCLUDES A SEPARATE "PYTHON INTERPRETER" AND A "pip" EXECUTABLE FOR MANAGING PACKAGES WITHIN "THAT" ENVIRONMENT
# USING "ABSOLUTE" PATH CREATION B/C "VENV" DOES NOT RECOGNIZE RELATIVE PATHS!!
RUN python -m venv /app/.venv


# COPY REQUIREMENTS.TXT (FOUND VIA RELATIVE PATH wrt WHERE THE DOCKERFILE IS) FROM THE LOCAL MACHINE TO THE "IMAGE ROOT"  DIRECTORY
COPY ./requirements.txt ./


# "ENV" SETS UP AN ENVIRONMENTAL VARIABLE THAT WILL BE ACCESSIBLE STARTING ONLY FROM "NOW" ON (i.e FOR BUILDING "SUBSEQUENT" LAYERS ).
# NORMALLY AFTER A VIRTUAL ENVIRONMENT IS "CREATED", IT MUST BE ACTIVATED BEFORE WE CAN ACCESS ITS LIBRARIES. HERE WITH THE COMMAND
# " PATH=".venv/bin:$PATH" WE ASK TO PRIORITIZE BINARIES IN THE ".env" VIRTUAL ENVIRONMENT OVER ANY OTHERS WHEN WE RUN PYTHON COMMANDS WITHOUT
# HAVING TO "EXPLICITLY ACTIVATE" THAT ENVIRONMENT
# TO BE SET (PREFERABLY) "AFTER" THE VIRTUAL ENVIRONMENT IS "CREATED" BUT "BEFORE" IT IS USED FOR THE FIRST TIME!
ENV PATH=".venv/bin:$PATH"

# INSTALLS THE LIBRARIES IN THE JUST CREATED VIRTUAL ENVIRONMENT B/C WE ASKED ABOVE TO USE THE BINARIES FROM THAT VIRTUAL ENVIRONMENT, 
# INCLUDING ITS PYTHON INTERPRETER AND PIP EXECUTABLE
RUN pip install --upgrade pip
RUN pip install -r requirements.txt


# OUR "FINAL" IMAGE

FROM python-base

# NOTE: THE "WORKDIR" INSTRUCTION "DOES NOT" CARRY OVER ACROSS THE STAGES STARTED BY A "FROM" COMMAND!!!!!!!!!!!!!!!!!!!!
# When the "WORKDIR" INSTRUCTION IS SEEN, Docker AUTOMATICALLY creates "INSIDE THE IMAGE" the "/app" FOLDER IF it doesn’t ALREADY exist!!!!
# AFTER the "WORKDIR /app" command, every command RAN "INSIDE THE IMAGE" USES files "FROM" that folder and ALSO the "CONTENT" of that folder is
# the basis WHEN using "RELATIVE" references 
WORKDIR /app

COPY --from=python-builder /app/.venv ./.venv


# COPY "FROM" THE "LOCAL" MACHINE THE APP FOLDER (FOUND RELATIVE TO DOCKERFILE "LOCATION") "TO" THE APP FOLDER IN THE IMAGE
# WITHOUT THE '.' IN THE DESTINATION INSTRUCTION, THE CONTENT OF APP (LOCAL) WILL GO IN A FOLDER ALSO CALLED APP IN THE "ROOT DIRECTORY" 
# OF THE IMAGE REGARDLESS OF THE DIRECTORY SET BY "WORKDIR /app" 
COPY ./app ./

# RE-SET the PATH to PRIORITIZE USING BINARIES FROM THE ".VENV" virtual environment
ENV PATH="/app/.venv/bin:$PATH"

# EXPOSE 7860
EXPOSE 5000


#gunicorn -w 4 -b 0.0.0.0:5000 app:app
ENTRYPOINT ["gunicorn", "-w", "4", "--bind", "0.0.0.0:5000", "app:app"]


#docker build --build-arg PYTHON_DOCKER_IMAGE=python:3.12.9-slim -f Dockerfile -t image-ai_agent_autonomous_reasoning_rag:latest .
#docker run  -p <host_port>:<container_port> my_appname:latest 
#docker run -p 8000:5000 -e HUGFACE_AUTH_TOKEN=<> -e MISTRAL_API_KEY=<> image-ai_agent_autonomous_reasoning_rag:latest










